name: Deploy Backend

on:
  workflow_run:
    workflows: [Upstream Sync]
    types: [completed]
  push:
    tags:
      - "*"
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - uses: pnpm/action-setup@v3
        name: Install pnpm
        id: pnpm-install
        with:
          version: 8
          run_install: false

      - name: Deploy Backend for ${{ github.ref_name }}
        run: |
          echo "=== Debug Information ==="
          echo "Current directory: $(pwd)"
          echo "Node version: $(node --version)"
          echo "PNPM version: $(pnpm --version)"
          echo "GitHub ref name: ${{ github.ref_name }}"
          echo "GitHub event name: ${{ github.event_name }}"
          
          export use_worker_assets=${{ secrets.USE_WORKER_ASSETS }}
          echo "use_worker_assets: ${use_worker_assets:-not set}"
          
          if [ -n "$use_worker_assets" ]; then
            echo "=== Building frontend assets ==="
            if [ -d "frontend" ]; then
              cd frontend/
              echo "Frontend directory contents:"
              ls -la
              echo "Installing frontend dependencies..."
              pnpm install --no-frozen-lockfile
              echo "Building frontend..."
              pnpm build:pages
              cd ..
            else
              echo "WARNING: frontend directory not found"
            fi
          fi

          export debug_mode=${{ secrets.DEBUG_MODE }}
          export use_mail_wasm_parser=${{ secrets.BACKEND_USE_MAIL_WASM_PARSER }}
          echo "debug_mode: ${debug_mode:-not set}"
          echo "use_mail_wasm_parser: ${use_mail_wasm_parser:-not set}"
          
          echo "=== Setting up worker ==="
          if [ -d "worker" ]; then
            cd worker/
            echo "Worker directory contents before:"
            ls -la
            
            # 检查 secrets 是否存在
            if [ -z "${{ secrets.BACKEND_TOML }}" ]; then
              echo "ERROR: BACKEND_TOML secret is not set"
              exit 1
            fi
            
            echo "Writing wrangler.toml..."
            # 使用更安全的方式写入文件
            cat > wrangler.toml << 'EOF'
          ${{ secrets.BACKEND_TOML }}
          EOF
          
            echo "Verifying wrangler.toml content..."
            if [ -f "wrangler.toml" ]; then
              echo "wrangler.toml file size: $(wc -c < wrangler.toml) bytes"
              echo "First 20 lines of wrangler.toml:"
              head -n 20 wrangler.toml || true
              echo "Last 10 lines of wrangler.toml:"
              tail -n 10 wrangler.toml || true
            else
              echo "ERROR: wrangler.toml was not created"
              exit 1
            fi
            
            echo "Validating TOML syntax..."
            # 尝试验证 TOML 语法
            if command -v python3 &> /dev/null; then
              echo "Trying to validate TOML with Python..."
              python3 -c "
          import toml
          try:
              with open('wrangler.toml', 'r') as f:
                  data = toml.load(f)
              print('TOML syntax is valid')
          except Exception as e:
              print(f'TOML syntax error: {e}')
              exit(1)
          " || echo "Python TOML validation failed (continuing anyway)"
            fi
            
            echo "Installing worker dependencies..."
            pnpm install --no-frozen-lockfile

            if [ -n "$use_mail_wasm_parser" ]; then
              echo "Using mail-parser-wasm-worker"
              pnpm add mail-parser-wasm-worker
              if [ -f "../.github/config/mail-parser-wasm-worker.patch" ]; then
                git apply ../.github/config/mail-parser-wasm-worker.patch
                echo "Applied mail-parser-wasm-worker patch"
              else
                echo "WARNING: patch file not found"
              fi
            fi

            echo "=== Running deploy ==="
            echo "Listing available scripts:"
            if [ -f "package.json" ]; then
              grep -A 20 '"scripts"' package.json
            fi
            
            # 显示环境变量
            echo "=== Environment Variables ==="
            env | grep -E "CLOUDFLARE_|CF_" | sort || true
            
            if [ -n "$debug_mode" ]; then
              echo "Running in debug mode"
              pnpm run deploy
            else
              echo "Running in normal mode"
              # 更详细的错误捕获
              echo "Current directory before deploy: $(pwd)"
              echo "Files in current directory:"
              ls -la
              
              set +e
              output=""
              echo "Executing: pnpm run deploy"
              output=$(timeout 300 pnpm run deploy 2>&1)
              exit_code=$?
              set -e
              
              echo "=== Deploy command completed ==="
              echo "Exit code: $exit_code"
              echo "=== Full output ==="
              echo "$output"
              echo "=== End of output ==="
              
              if [ $exit_code -ne 0 ]; then
                  echo "=== Deploy failed ==="
                  echo "Command failed with exit code $exit_code"
                  echo "Last 50 lines of output:"
                  echo "$output" | tail -n 50
                  exit $exit_code
              else
                  echo "Deploy successful"
              fi
            fi
            echo "Deployed for tag ${{ github.ref_name }}"
          else
            echo "ERROR: worker directory not found"
            echo "Available directories:"
            ls -la
            exit 1
          fi
        env:
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
